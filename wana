#!/bin/sh

# AUTHOR: xsedla1h, Simon Sedlacek
# EMAIL: xsedla1h@stud.fit.vutbr.cz

export POSIXLY_CORRECT=yes

# variable for storing newline character
nl='
'

# filter parameter variables 
after=""
before=""
ipaddr=""
uri=""

# variable indicating which command is to be executed
com=""

while [ $# != 0 ]
do
  if [ -z "$lastArgument" ];
  then
    case $1 in
      "list-ip")
         com="$1"
         shift
         break
         ;;
      "list-hosts")
         com="$1"
         shift
         break
         ;;
      "list-uri")
        com="$1"
        shift
        break
        ;;
      "hist-ip")
        com="$1"
        shift
        break
        ;;
      "hist-load")
        com="$1"
        shift
        break
        ;;
      *)
        lastArgument="$1"
        ;;
    esac

  else
    case $lastArgument in

      "-a")

        if [ -z "$after" ];
        then
          if echo "$2" | grep -q -E "^[1-2][0-9]{3}-(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1]) ([0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9]$"
          then
            after="$2"
          else
            echo "Error: Invalid '-a' filter parameter format: '$2'"
            exit 1
          fi
        else
          echo "Error: Got two instances of filter '-a'"
          exit 1
        fi
        ;;
        
      "-b")

        if [ -z "$before" ];
        then
          if echo "$2" | grep -q -E "^[1-2][0-9]{3}-(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1]) ([0-1][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9]$"
          then
            before="$2"
          else
            echo "Error: Invalid '-b' filter parameter format: '$2'"
            exit 1
          fi
        else
          echo "Error: Got two instances of filter '-b'"
          exit 1
        fi
        ;;

      "-ip")

        if [ -z "$ipaddr" ];
        then
          if echo "$2" | grep -q -E "^((([0-9]{1,3}\.){3}[0-9]{1,3})|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$"
          then
            ipaddr="$2"
          else
            echo "Error: Invalid '-ip' filter parameter format: '$2'"
            exit 1
          fi
        else
          echo "Error: Got two instances of filter '-ip'"
          exit 1
        fi
        ;;

      "-uri")

        if [ -z "$uri" ];
        then
          if echo "$2" | grep -q -E "^[^[:space:]]+$"
          then
            uri="$2"
          else
            echo "Error: Invalid '-uri' filter parameter format: '$2'"
            exit 1
          fi
        else
          echo "Error: Got two instances of filter '-uri'"
          exit 1
        fi
        ;;

      *)
        if [ -f "$lastArgument" ]; then
          break
        else
          echo "Error: '$lastArgument' is not a valid program argument"
          exit 1
        fi
        ;;
    esac

      lastArgument=""
      shift 2
  fi
done

# loading all the file data
if [ $# = 0 ];
then
  # getting data from stdin
  filetext=$(cat)
else

  # getting data from files given as arguments
  for file in "$@"
  do
    if [ -f "$file" ];
    then
      if [ -r "$file" ];
      then
        if [ "${file##*.}" = gz ]; then
          filetext="${filetext}${nl}$(gunzip -c "$file")"
        else
          filetext="${filetext}${nl}$(cat "$file")"
        fi
      else
        echo "Error: '$file' is not a readable file"
        exit 1
      fi

    else
      echo "Error: '$file' is not an existing file"
      exit 1
    fi
  done

  # delete the redundant empty first line
  filetext=$(echo "$filetext" | sed '1d')
fi



# filter the data

if [ -n "$after" ];
then

  # converting the given date to a number
  after=$(echo "$after" | sed 's/[- :]//g')

  dates=$(echo "$filetext" | awk '{ print $4 }' | cut -b 2- | sed 's/[:/]/ /g' |
    awk '{ $2=sprintf("%02d", (match("JanFebMarAprMayJunJulAugSepOctNovDec", $2)+2)/3); printf("%s%s%s%s%s%s\n", $3, $2, $1, $4, $5, $6); }')

  IFS=${nl}
  for line in $filetext
  do
    if [ "$(echo "$dates" | head -n 1)" -gt "$after" ];
    then
      output="${output}${nl}${line}"
    fi

    dates=$(echo "$dates" | sed '1d')
  done
  
  # remove the redundant and empty first line
  filetext=$(echo "$output" | sed '1d')
  output=""
fi


if [ -n "$before" ];
then
  # converting the given date to a number
  before=$(echo "$before" | sed 's/[- :]//g')

  dates=$(echo "$filetext" | awk '{ print $4 }' | cut -b 2- | sed 's/[:/]/ /g' |
    awk '{ $2=sprintf("%02d", (match("JanFebMarAprMayJunJulAugSepOctNovDec", $2)+2)/3); printf("%s%s%s%s%s%s\n", $3, $2, $1, $4, $5, $6); }')

  IFS=${nl}
  for line in $filetext
  do
    if [ "$(echo "$dates" | head -n 1)" -lt "$before" ];
    then
      output="${output}${nl}${line}"
    fi

    dates=$(echo "$dates" | sed '1d')
  done
  
  # remove the redundant and empty first line
  filetext=$(echo "$output" | sed '1d')
  output=""
fi


if [ -n "$ipaddr" ];
then
  # discard all the lines that do not begin with the given ip
  filetext=$(echo "$filetext" | grep "^$ipaddr")
fi


if [ -n "$uri" ];
then
  # discard all the lines that do not correspond to the given uri
  filetext=$(echo "$filetext" | grep -E "^.*\"(GET|POST|HEAD) $uri HTTP/1")
fi


# execute loaded commands

case $com in
  "list-ip")
    # printing the ip addresses
    if [ -n "$filetext" ];
    then
      echo "$filetext" | awk '{ print $1 }' | sort -u
    fi
    ;;

  "list-hosts")
    # extract the ip addresses
    if [ -n "$filetext" ];
    then
      filetext=$(echo "$filetext" | awk '{ print $1 }')

      for line in $filetext
      do
        if temp=$(host "$line");
        then
          output="${output}${nl}$(echo "$temp" | grep -v "is an alias for" | awk '{ print $NF }')"
        else
          output="${output}${nl}${line}"
        fi
      done

      # remove empty first line and sort the output
      echo "$output" | sed '1d' | sort -u
    fi
    ;;

  "list-uri")
    if [ -n "$filetext" ];
    then
      echo "$filetext" | grep -E "^.*\"(GET|POST|HEAD) [^[:space:]]+ HTTP/1" | awk '{ print $7 }' | sort -u
    fi
    ;;

  "hist-ip")
    if [ -n "$filetext" ];
    then
      echo "$filetext" | awk '{ print $1 }' | sort | uniq -c |
        awk '{ for (i = 0; i < $1; i++) { hashtags = sprintf ("%s#", hashtags); } printf("%s (%d): %s", $2, $1, hashtags); printf("\n"); hashtags=""}' |
        sort -n --field-separator='(' -k 2 -r
    fi
    ;;
    
  "hist-load")
    if [ -n "$filetext" ];
    then
      echo "$filetext" | awk '{ print $4 }' | cut -b 2- | sed 's/[:/]/ /g' |
        awk '{ $2=sprintf("%02d", (match("JanFebMarAprMayJunJulAugSepOctNovDec", $2)+2)/3); printf("%s-%s-%s %s:00\n", $3, $2, $1, $4); }' |
        sort | uniq -c | awk '{ printf("%s %s (%d): ", $2, $3, $1); for (i = 0; i < $1; i++) { printf ("#"); } printf("\n"); }'
    fi
    ;;

  *)
    if [ -n "$filetext" ];
    then
      echo "$filetext"
    fi
    ;;

esac

exit 0
